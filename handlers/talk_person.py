from aiogram import Router, types
from aiogram.filters.command import Command
from aiogram.types import CallbackQuery
from keyboards_box.talk_kb import get_personality_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.gpt_service import ChatGPTService


router = Router()
gpt_service_talk = ChatGPTService()


PERSONALITIES = {
    "einstein": "–¢—ã –ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω. –û–±—ä—è—Å–Ω—è–π –≤—Å—ë —Å –Ω–∞—É—á–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è.",
    "shakespeare": "–¢—ã –£–∏–ª—å—è–º –®–µ–∫—Å–ø–∏—Ä. –û—Ç–≤–µ—á–∞–π –≤ —Å—Ç–∏–ª–µ –ø–æ—ç—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.",
    "julius": "–¢—ã –ö–æ–Ω—å –Æ–ª–∏–π. M—É–ª—å—Ç—è—à–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π —Ñ—Ä–∞–Ω—à–∏–∑—ã –º—É–ª—å—Ç—Ñ–∏–ª—å–º–æ–≤ ¬´–¢—Ä–∏ –±–æ–≥–∞—Ç—ã—Ä—è¬ª. –û—Ç–≤–µ—á–∞–π –≤ —à—É—Ç–æ—á–Ω–æ–π —Ñ–æ—Ä–º–µ.",
    "pamela": "–¢—ã –ü–∞–º–µ–ª–∞ –ê–Ω–¥–µ—Ä—Å–æ–Ω. –ó–∞–∏–≥—Ä—ã–≤–∞–π –∏ —Ñ–ª–∏—Ä—Ç—É–π."
}

user_personality = {}


def get_stop_talk():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="stop_talk")]
        ]
    )


@router.message(Command("talk"))
async def talk_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /talk - –≤—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏"""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å:", reply_markup=get_personality_keyboard())


@router.callback_query(lambda c: c.data in PERSONALITIES)
async def select_personality(callback: CallbackQuery):
    """–í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    personality = callback.data
    user_personality[user_id] = personality

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT
    gpt_service_talk.set_system_message(PERSONALITIES[personality])

    await callback.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {personality.capitalize()}! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.",
                                     reply_markup=get_stop_talk())

@router.message(lambda message: message.from_user.id in user_personality)
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    user_id = message.from_user.id
    response = gpt_service_talk.get_personality_response(message.text)
    await message.answer(response, reply_markup=get_stop_talk())


@router.callback_query(lambda c: c.data == "stop_talk")
async def stop_talk(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å' –∏ –æ—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = callback.from_user.id
    user_personality.pop(user_id, None)
    gpt_service_talk.reset_history()

    await callback.message.edit_text("–ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /talk, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.")
    await callback.answer()


