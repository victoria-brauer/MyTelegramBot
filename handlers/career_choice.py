from aiogram import Router, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards_box.resume_keyboards import make_column_keyboard

router = Router()

choice_education = [
    "–°—Ä–µ–¥–Ω–µ–µ",
    "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ",
    "–°—Ä–µ–¥–Ω–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ",
    "–í—ã—Å—à–µ–µ",
]

choice_experience = [
    "–ù–µ—Ç –æ–ø—ã—Ç–∞",
    "–ú–µ–Ω–µ–µ 1 –≥–æ–¥–∞",
    "1-3 –≥–æ–¥–∞",
    "3-5 –ª–µ—Ç",
    "–ë–æ–ª–µ–µ 5 –ª–µ—Ç",
]

choice_skills = [
    "–ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å",
    "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ",
    "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ",
    "–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
    "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏",
    "–ü—Ä–æ–¥–∞–∂–∏",
    "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥",
    "–î–∏–∑–∞–π–Ω",
]


class CareerChoice(StatesGroup):
    education = State()
    experience = State()
    skills = State()


@router.message(Command("resume"))
async def command_resume(message: types.Message, state: FSMContext):
    await message.answer("–í–∞—à–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", reply_markup=make_column_keyboard(choice_education))
    await state.set_state(CareerChoice.education)


@router.message(CareerChoice.education, F.text.in_(choice_education))
async def process_experience(message: types.Message, state: FSMContext):
    await state.update_data(selected_education=message.text)
    await message.answer("–í–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", reply_markup=make_column_keyboard(choice_experience))
    await state.set_state(CareerChoice.experience)


@router.message(CareerChoice.experience, F.text.in_(choice_experience))
async def process_skills(message: types.Message, state: FSMContext):
    await state.update_data(selected_experience=message.text)
    await message.answer("–í–∞—à–∏ –Ω–∞–≤—ã–∫–∏", reply_markup=make_column_keyboard(choice_skills))
    await state.set_state(CareerChoice.skills)


@router.message(CareerChoice.education)
async def education_incorrect(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π! \U0001F60A", reply_markup=make_column_keyboard(choice_education))


@router.message(CareerChoice.skills, F.text.in_(choice_skills))
async def process_vacancy(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    result_text = (
        f'‚úÖ –ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n\n'
        f'üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_data["selected_education"]}\n'
        f'üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {user_data["selected_experience"]}\n'
        f'üõ† –ù–∞–≤—ã–∫–∏: {message.text}\n\n'
        f'üîÑ –ß—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /resume\n'
        f'üõë –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–µ–π—Å—Ç–≤–∏–π, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop'
    )
    await message.answer(result_text, reply_markup=types.ReplyKeyboardRemove())
    await state.clear()


@router.message(CareerChoice.experience)
async def education_incorrect(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π! \U0001F60A", reply_markup=make_column_keyboard(choice_experience))


@router.message(CareerChoice.skills)
async def education_incorrect(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π! \U0001F60A", reply_markup=make_column_keyboard(choice_skills))
